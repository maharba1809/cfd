!__________________________________________________
       SUBROUTINE frontera_x ()
!__________________________________________________

      use dimensiones
      use velocidades
      use variables
      use deltas
      use consadim
      use flow
      use fronterapl
      use jacobtools
      use derivtools
      use consderper
      use consdernper

      IMPLICIT NONE
      integer :: i,j,k,l,m
      real ri,pi,ui,vi,wi
      real ri_1,pi_1,ui_1,vi_1,wi_1
      real ri_2,pi_2,ui_2,vi_2,wi_2
      real ri_3,pi_3,ui_3,vi_3,wi_3
      real ri_4,pi_4,ui_4,vi_4,wi_4
      real dudx,drdx,dvdx,dpdx,dwdx
      real uci,ti,p_inf,xmach
      real pl_l1,pl_l2,pl_l3,pl_l4,pl_l5
      real pl_d1,pl_d2,pl_d3,pl_d4,pl_d5

!______________________________________________
!    z=1
!______________________________________________

      DO k=1,nz
       DO j=1,ny

        ui=u(1,j,k,1)
        vi=u(1,j,k,2)
        wi=u(1,j,k,3)
        pi=pres(1,j,k)
        ri=um(1,j,k,1)
        ti=pi/ri

        DO i=1,nx
         du(i)=u(i,j,k,1)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        dudx=jbn(1,j,k,1)*du(1)

        DO i=1,nx
         du(i)=pres(i,j,k)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        dpdx=jbn(1,j,k,1)*du(1)

        uci=SQRT(gamma*c3*ti)
!__________________________________________________
!       ENTRADA (w=0)
!__________________________________________________
        pl_l1=(ui-uci)*(c3*dpdx-ri*uci*dudx)
        pl_l5=pl_l1
        pl_l2=0.5*c2*(pl_l1+pl_l5)
        pl_l3=0.0
        pl_l4=0.0

        pl_d1=(pl_l2+0.5*(pl_l1+pl_l5))/(uci*uci)
        pl_d2=0.0
        pl_d2=0.0
        pl_d3=0.0
        pl_d4=0.0

        frontx(1,1,j,k)=pl_d1
        frontx(1,2,j,k)=0.0         
        frontx(1,3,j,k)=0.0
        frontx(1,4,j,k)=0.0
        frontx(1,5,j,k)=0.0
!        write(6,*)ui,ri,pi,uci,dpdx,dudx
       ENDDO
      ENDDO
!______________________________________________________________________
!     z=nz
!______________________________________________________________________
      DO k=1,nz
       DO j=1,ny
        ui=u(nx,j,k,1)
        vi=u(nx,j,k,2)
        wi=u(nx,j,k,3)
        pi=pres(nx,j,k)
        ri=um(nx,j,k,1)


        DO i=1,nx
         du(i)=u(i,j,k,1)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        dudx=jbn(nx,j,k,1)*du(nx)

        DO i=1,nx
         du(i)=u(i,j,k,2)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        dvdx=jbn(nx,j,k,1)*du(nx)

        DO i=1,nx
         du(i)=u(i,j,k,3)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        dwdx=jbn(nx,j,k,1)*du(nx)

        DO i=1,nx
         du(i)=pres(i,j,k)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        dpdx=jbn(nx,j,k,1)*du(nx)

        DO i=1,nx
         du(i)=um1(i,j,k,1)
        ENDDO
        call derivnper(nx,du,axnp,bxnp,cxnp,deltax)
        drdx=jbn(nx,j,k,1)*du(nx)


        ti=pi/ri
        uci=SQRT(gamma*c3*ti)
        xmach=mach*ui/sqrt(ti)
!__________________________________________________
!       SALIDA (w=0)
!__________________________________________________
        p_inf=1.00
        pl_l5=(ui+uci)*(c3*dpdx+ri*uci*dudx)
        pl_l1=.1*(1.-xmach*xmach)*uci*(pi-p_inf)*c3
        pl_l2=ui*(uci*uci*drdx-c3*dpdx)
        pl_l3=ui*dvdx
        pl_l4=ui*dwdx

        pl_d1=(pl_l2+0.5*(pl_l1+pl_l5))/(uci*uci)
        pl_d2=0.5*(pl_l1+pl_l5)
        pl_d3=(pl_l5-pl_l1)/(2.*ri*uci)
        pl_d4=pl_l3
        pl_d5=pl_l4

        frontx(2,1,j,k)=pl_d1
        frontx(2,2,j,k)=ui*pl_d1+ri*pl_d3
        frontx(2,3,j,k)=vi*pl_d1+ri*pl_d4
        frontx(2,4,j,k)=wi*pl_d1+ri*pl_d5
        frontx(2,5,j,k)=0.5*(ui*ui+vi*vi+wi*wi)*pl_d1+pl_d2/c2+  &
                        ri*ui*pl_d3+ri*vi*pl_d4+ri*wi*pl_d5

       ENDDO
      ENDDO
      RETURN
      END SUBROUTINE FRONTERA_X

!____________________________________________________________________
      SUBROUTINE FXSOURCE (irk,neq)
!____________________________________________________________________

      use dimensiones
      use variables
      use fronterapl
      use tiempo
      implicit none
      integer neq,irk,i,j,k,l,m
      real deltat

       IF(irk.eq.1)THEN
        deltat=dt
       ELSEIF(irk.eq.2)THEN
        deltat=0.25*dt
       ELSEIF(irk.eq.3)THEN
        deltat=(2./3.)*dt
       ENDIF 

       Do k=1,nz
        Do j=1,ny
         um1(1,j,k,neq)=um1(1,j,k,neq)-deltat*frontx(1,neq,j,k)
         um1(nx,j,k,neq)=um1(nx,j,k,neq)-deltat*frontx(2,neq,j,k)
        Enddo
       Enddo

       RETURN
       END SUBROUTINE FXSOURCE

!__________________________________________________
       SUBROUTINE frontera_x_val (irk)
!__________________________________________________

       use dimensiones
       use velocidades
       use variables
       use consadim
       use fronterapl
       use frontera_uval
       use ranaleo
       IMPLICIT NONE
       integer :: i,j,k,l,m,irk
       real :: pe,te,re,eps,bruit

       eps=0.2
       do k=1,nz
       do j=1,ny
!        If(irk.eq.1) then
          ue=frontin(j,k,2)
          ve=frontin(j,k,3)
          we=frontin(j,k,4)
 
          if((k.gt.31).and.(k.lt.39))then
            ue=ue+eps*(ran(idum)-0.5)
            ve=ve+eps*(ran(idum)-0.5)
            we=we+eps*(ran(idum)-0.5)

          elseif((k.gt.71).and.(k.lt.79))then
            ue=ue+eps*(ran(idum)-0.5)
            ve=ve+eps*(ran(idum)-0.5)
            we=we+eps*(ran(idum)-0.5)


          elseif((k.ge.40).and.(k.le.70))then
            ue=ue+eps*(ran(idum)-0.5)*0.2
            ve=ve+eps*(ran(idum)-0.5)*0.2
            we=we+eps*(ran(idum)-0.5)*0.2
          endif
!          endif
          te=frontin(j,k,1)
          re=um1(1,j,k,1)
          pe=te*re
       
           um1(1,j,k,2)=ue*re
           um1(1,j,k,3)=ve*re
           um1(1,j,k,4)=we*re
           um1(1,j,k,5)=pe/c2+c1*re*(ue**2+ve**2+we**2)
           u(1,j,k,1)=ue
           u(1,j,k,2)=ve
           u(1,j,k,3)=we
           temp(1,j,k)=te
           pres(1,j,k)=pe
        enddo
        enddo
        return
        end subroutine frontera_x_val

!__________________________________________________
       SUBROUTINE inifrontera_x_val ()
!__________________________________________________

       use dimensiones
       use velocidades
       use fronterapl
       IMPLICIT NONE
       integer :: i,j,k,l,m
       integer :: in_Nx,in_Ny,in_Nz,in_Nvar

      write(6,*)'LECTURA CAMPO DE ENTRADA X'
      open(11,file='frontx.in',form='unformatted')
      read(11,err=1002)in_Nvar
      if (Nd.ne.in_Nvar) goto 1002
      read(11,err=1003)in_Nx,in_Ny,in_Nz
      if (Nx.ne.in_Nx) goto 1003
      if (Ny.ne.in_Ny) goto 1003
      if (Nz.ne.in_Nz) goto 1003

      read(11,err=1004) frontin

      CLOSE (11)
      RETURN

 1002 Print*,in_Nvar,' leida ',Nd,' esperada'
      print*,'ERROR DETECTADO LEYENDO EN NUMERO DE VARIABLES'
      stop
 1003 print*,in_Nx,in_Ny,in_Nz,' leidas ',Nx,Ny,Nz,' eperadas'
      print*,'ERROR DETECTADO LEYENDO EN DIMENSIONES'
      stop
 1004 print*,'ERROR DETECTADO LEYENDO LA MALLA'
      stop

!       do k=1,nz
!       do j=1,ny
!        frontin(j,k,1)=temp(1,j,k)
!        frontin(j,k,2)=u(1,j,k,1)
!        frontin(j,k,3)=u(1,j,k,2)
!        frontin(j,k,4)=u(1,j,k,3)
!        frontin(j,k,5)=pres(1,j,k)
!       enddo
!       enddo
!       return
       end subroutine inifrontera_x_val

!__________________________________________________
       SUBROUTINE inialea ()
!__________________________________________________

       use ifport

       call seed(1995)
 
       return
       end subroutine inialea
